CREATE DATABASE databasename;
CREATE DATABASE testDB;

DROP DATABASE databasename;
DROP DATABASE testDB;

BACKUP DATABASE databasename
TO DISK = 'filepath';

BACKUP DATABASE databasename
TO DISK = 'filepath'
WITH DIFFERENTIAL;


CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);

CREATE TABLE Material (
    mmNo int,
    matName varchar(20),
    mat_pare varchar(20),
    record varchar(25),
    suppl varchar(25)
);

DROP TABLE table_name;

TRUNCATE TABLE table_name;


CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);


CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);


ALTER TABLE Persons
DROP CONSTRAINT PK_Person;

SQL FOREIGN KEY on CREATE TABLE

CREATE TABLE Orders (
    OrderID int NOT NULL PRIMARY KEY,
    OrderNumber int NOT NULL,
    PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
);

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
);

SQL FOREIGN KEY on ALTER TABLE
ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder
FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);


DROP a FOREIGN KEY Constraint

ALTER TABLE Orders
DROP CONSTRAINT FK_PersonOrder;



SQL CHECK Constraint:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Tambaram')
);


ALTER TABLE Persons
ADD CHECK (Age>=18);


ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Tambaram');


ALTER TABLE Persons
DROP CHECK CHK_PersonAge;

*********************************************************************
SQL DEFAULT Constraint


SQL DEFAULT on CREATE TABLE
CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
);


ALTER TABLE Persons
ALTER City SET DEFAULT 'Tambaram';

ALTER TABLE Persons
MODIFY City DEFAULT 'Tambaram';


ALTER TABLE Persons
ALTER COLUMN City DROP DEFAULT;


****************************************
SQL CREATE INDEX Statement
CREATE INDEX index_name
ON table_name (column1, column2, ...);

CREATE UNIQUE INDEX index_name
ON table_name (column1, column2, ...);


DROP INDEX index_name;


****************************************
SQL AUTO INCREMENT Field
CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);


ALTER TABLE Persons AUTO_INCREMENT=100;

CREATE SEQUENCE seq_person
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

INSERT INTO Persons (Personid,FirstName,LastName)
VALUES (seq_person.nextval,'Lars','Monsen');

****************************************
SQL CREATE VIEW Statement
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;


SELECT * FROM [Brazil Customers];

CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;

CREATE OR REPLACE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName, City
FROM Customers
WHERE Country = 'Brazil';

DROP VIEW view_name;


***************************************************
SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN "The quantity is greater than 30"
    WHEN Quantity = 30 THEN "The quantity is 30"
    ELSE "The quantity is under 30"
END
FROM OrderDetails;


SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

************************************************+

CREATE PROCEDURE SelectAllCustomers
AS
SELECT * FROM Customers
GO;

EXEC SelectAllCustomers;
*******************************************************+


SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price < 20);


SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price = 22);

*************************************************************************************+
SQL FULL OUTER JOIN Keyword

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;


************************************************************************************
GROUP BY
The GROUP BY command is used to group the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG)

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;


SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;
*****************************************************************************************+
SELECT * FROM Customers
LIMIT 3;

SELECT * FROM Customers
WHERE ROWNUM <= 3;

SELECT TOP 3 * FROM Customers;

***********************************************


SQL Syntax

SQL SELECT
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';


SQL SELECT DISTINCT
SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);


SELECT * FROM Customers
WHERE CustomerID=1;

SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='MÃ¼nchen');

SELECT * FROM Customers
ORDER BY Country, CustomerName;


SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

***************************************************************
/*You should Restore the Database after finishing this example*/
UPDATE Customers
SET ContactName='Juan';
***************************************************************

SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';
***************************************************************

SELECT * FROM Customers
WHERE City LIKE 'ber%';
***************************************************************

SELECT * FROM Customers
WHERE City LIKE '[!bsp]%';
***************************************************************

SELECT * FROM Customers
WHERE City LIKE '[bsp]%';
***************************************************************

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');
***************************************************************

SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;
***************************************************************

SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;
***************************************************************

SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;
***************************************************************

SELECT ALL ProductName
FROM Products
WHERE TRUE;

SELECT ProductName 
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);
***************************************************************

INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers
WHERE Country='Germany';
***************************************************************

SELECT OrderID, Quantity,
CASE WHEN Quantity > 30 THEN 'The quantity is greater than 30'
WHEN Quantity = 30 THEN 'The quantity is 30'
ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;
***************************************************************

SELECT CustomerName, City, Country FROM Customers
ORDER BY (CASE
WHEN City IS NULL THEN Country
ELSE City
END);
***************************************************************




